//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Controls/ControlsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsMap"",
    ""maps"": [
        {
            ""name"": ""HeroKnightMap"",
            ""id"": ""d23be70d-dd22-4471-8d5e-3823c0846be3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""84d9925b-7578-44d6-b0f5-f7cf12542070"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ac6790b5-5aaf-4f7c-beea-6034bf5b0026"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bf0c6677-5591-4913-bf11-934965fef7ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""118cc398-40b9-483e-803b-1061879ff618"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6ea9ea75-d56d-49aa-87c0-e9033e0bc858"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""SideMove"",
                    ""id"": ""2e182894-1c93-407c-82b5-161718a5b9fd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""90d02cb2-7709-4573-a2e5-cc8323c8e7c3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d010ce55-8883-4cb1-b6e6-e3ed8a82edcb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dc4858c1-f8c5-4237-bcdb-d55474d1345c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a90b4a8-0e45-47fd-a5d2-d84e51a7dd81"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a1e6c74-4ad5-4dff-874c-68b7cd20ae6b"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcdcbc84-3649-47b3-9bbd-e78657d45b5b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PrototypeMap"",
            ""id"": ""78911bc3-0964-4f96-b7b7-a64c20fd7edc"",
            ""actions"": [
                {
                    ""name"": ""MouseInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""885e605c-4f1f-438c-a9c0-22bfc77e6209"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7a3178b1-3f1a-467a-8b9d-129a01d20edf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c2ab8d75-eb22-4010-a5bf-536d2939c1fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""344e0021-5eb0-4092-8d89-773bcec7a50f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""95da32de-7650-491c-9622-27d4322c8ec4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12b28e48-daa2-4803-8a6d-43f2338f23d7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58152b0f-b1c7-4db6-ab10-75a2d70ad3cc"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c64384a0-2693-4246-a22a-2398d3aa9aa5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HeroKnightMap
        m_HeroKnightMap = asset.FindActionMap("HeroKnightMap", throwIfNotFound: true);
        m_HeroKnightMap_Move = m_HeroKnightMap.FindAction("Move", throwIfNotFound: true);
        m_HeroKnightMap_Jump = m_HeroKnightMap.FindAction("Jump", throwIfNotFound: true);
        m_HeroKnightMap_Roll = m_HeroKnightMap.FindAction("Roll", throwIfNotFound: true);
        m_HeroKnightMap_Attack = m_HeroKnightMap.FindAction("Attack", throwIfNotFound: true);
        m_HeroKnightMap_Block = m_HeroKnightMap.FindAction("Block", throwIfNotFound: true);
        // PrototypeMap
        m_PrototypeMap = asset.FindActionMap("PrototypeMap", throwIfNotFound: true);
        m_PrototypeMap_MouseInput = m_PrototypeMap.FindAction("MouseInput", throwIfNotFound: true);
        m_PrototypeMap_Attack = m_PrototypeMap.FindAction("Attack", throwIfNotFound: true);
        m_PrototypeMap_Jump = m_PrototypeMap.FindAction("Jump", throwIfNotFound: true);
        m_PrototypeMap_Move = m_PrototypeMap.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HeroKnightMap
    private readonly InputActionMap m_HeroKnightMap;
    private IHeroKnightMapActions m_HeroKnightMapActionsCallbackInterface;
    private readonly InputAction m_HeroKnightMap_Move;
    private readonly InputAction m_HeroKnightMap_Jump;
    private readonly InputAction m_HeroKnightMap_Roll;
    private readonly InputAction m_HeroKnightMap_Attack;
    private readonly InputAction m_HeroKnightMap_Block;
    public struct HeroKnightMapActions
    {
        private @ControlsMap m_Wrapper;
        public HeroKnightMapActions(@ControlsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_HeroKnightMap_Move;
        public InputAction @Jump => m_Wrapper.m_HeroKnightMap_Jump;
        public InputAction @Roll => m_Wrapper.m_HeroKnightMap_Roll;
        public InputAction @Attack => m_Wrapper.m_HeroKnightMap_Attack;
        public InputAction @Block => m_Wrapper.m_HeroKnightMap_Block;
        public InputActionMap Get() { return m_Wrapper.m_HeroKnightMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeroKnightMapActions set) { return set.Get(); }
        public void SetCallbacks(IHeroKnightMapActions instance)
        {
            if (m_Wrapper.m_HeroKnightMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnJump;
                @Roll.started -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnRoll;
                @Attack.started -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnAttack;
                @Block.started -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_HeroKnightMapActionsCallbackInterface.OnBlock;
            }
            m_Wrapper.m_HeroKnightMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
            }
        }
    }
    public HeroKnightMapActions @HeroKnightMap => new HeroKnightMapActions(this);

    // PrototypeMap
    private readonly InputActionMap m_PrototypeMap;
    private IPrototypeMapActions m_PrototypeMapActionsCallbackInterface;
    private readonly InputAction m_PrototypeMap_MouseInput;
    private readonly InputAction m_PrototypeMap_Attack;
    private readonly InputAction m_PrototypeMap_Jump;
    private readonly InputAction m_PrototypeMap_Move;
    public struct PrototypeMapActions
    {
        private @ControlsMap m_Wrapper;
        public PrototypeMapActions(@ControlsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseInput => m_Wrapper.m_PrototypeMap_MouseInput;
        public InputAction @Attack => m_Wrapper.m_PrototypeMap_Attack;
        public InputAction @Jump => m_Wrapper.m_PrototypeMap_Jump;
        public InputAction @Move => m_Wrapper.m_PrototypeMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_PrototypeMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PrototypeMapActions set) { return set.Get(); }
        public void SetCallbacks(IPrototypeMapActions instance)
        {
            if (m_Wrapper.m_PrototypeMapActionsCallbackInterface != null)
            {
                @MouseInput.started -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnMouseInput;
                @MouseInput.performed -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnMouseInput;
                @MouseInput.canceled -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnMouseInput;
                @Attack.started -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnAttack;
                @Jump.started -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PrototypeMapActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_PrototypeMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseInput.started += instance.OnMouseInput;
                @MouseInput.performed += instance.OnMouseInput;
                @MouseInput.canceled += instance.OnMouseInput;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public PrototypeMapActions @PrototypeMap => new PrototypeMapActions(this);
    public interface IHeroKnightMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
    }
    public interface IPrototypeMapActions
    {
        void OnMouseInput(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
